#!/usr/bin/env python3
"""
Generate indentation-based paths for structured files.

It is quite often desired to be able quickly to visualize "path" to the given
line.  For some languagues indentation is part of the syntax (e.g. Python), and
for the most of the file formats have "pretty-printers" which use indentation
to assist humans perceiving those files structure.

Then this tool could help to visualize path to each line, or to a specific line
identified via regex, or just by a line number.

Examples from my pains of the past two days

- Visualize where in the datacite XML and JSON schemas we have "relatedIdenfifier"
  defined

    ❯ ~/bin/show-paths -f full-lines -e 'name="relatedIdentifier"' metadata.xsd
    16  <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://datacite.org/schema/kernel-4" targetNamespace="http://datacite.org/schema/kernel-4" elementFormDefault="qualified" xml:lang="EN">
    28    <xs:element name="resource">
    35      <xs:complexType>
    36        <xs:all>
    236:         <xs:element name="relatedIdentifiers" minOccurs="0">
    237            <xs:complexType>
    238              <xs:sequence>
    239:               <xs:element name="relatedIdentifier" minOccurs="0" maxOccurs="unbounded">

    ❯ ~/bin/show-paths -f full-lines -e '\brelatedIdentifier\b' ~/proj/datacite/inveniosoftware-datacite/datacite/schemas/datacite-v4.5.json
    304      "properties": {
    419          "relatedIdentifiers": {
    421              "items": {
    425                  "properties": {
    426:                     "relatedIdentifier": {"type": "string"},
    429:                 "required": ["relatedIdentifier", "relatedIdentifierType", "relationType"],

- Dig out where enhanced DICOM contains RepetitionTime in contrast to regular
  or interoperable one (this was the drop which overfilled the cup and
  needed to trigger coding!)


    ❯ dcmdump dcm_qa_xa30i/In/7001_func-bold_task-fa_run-1/7001001_1.3.12.2.1107.5.2.43.67093.30000023011319484937100000688.dcm | show-paths -e RepetitionTime
    77:  (0018,0080) DS [1000]                                   #   4, 1 RepetitionTime

    ❯ dcmdump dcm_qa_xa30/In/7_func-bold_task-fa_run-1/0001_1.3.12.2.1107.5.2.43.67093.2022071112090640678703211.dcm | show-paths -e RepetitionTime
    467: (5200,9229).(fffe,e000).(0018,9112).(fffe,e000)         (0018,0080) DS [1000]                                   #   4, 1 RepetitionTime

    ❯ dcmdump dcm_qa_xa30/In/7_func-bold_task-fa_run-1/0001_1.3.12.2.1107.5.2.43.67093.2022071112090640678703211.dcm | show-paths -f full-lines -e RepetitionTime
    221  (5200,9229) SQ (Sequence with undefined length #=1)     # u/l, 1 SharedFunctionalGroupsSequence
    222    (fffe,e000) na (Item with undefined length #=11)        # u/l, 1 Item
    465      (0018,9112) SQ (Sequence with undefined length #=1)     # u/l, 1 MRTimingAndRelatedParametersSequence
    466        (fffe,e000) na (Item with undefined length #=9)         # u/l, 1 Item
    467:         (0018,0080) DS [1000]                                   #   4, 1 RepetitionTime

 - In Python code (better visible in terminal with colors), e.g.

    ❯ show-paths -f full-lines -e '\bcolored\b' $(which show-paths)
    57:     29:     from termcolor import colored
    59:     31:     colored = None
    63:     63:             path_str = colored(path_str, attrs=["dark"])
    64:     64:             line = colored(line, "red")
    68:     74:             line_colored = colored(lines[i], attrs=["dark"]) if use_color else lines[i]
    69:     78:         line_colored = colored(lines[line_num], "red") if use_color else lines[line_num]
    71:     111:         (args.color == "auto" and sys.stdout.isatty() and colored)
    72:     113:     if use_color and not colored:
    81  try:
    82:     from termcolor import colored
    83  except ImportError as exc:
    84:     colored = None
    110  def print_inline(paths, lines, use_color):
    112      for line_num, path in paths:
    115          if use_color:
    116:             path_str = colored(path_str, attrs=["dark"])
    117:             line = colored(line, "red")
    120  def print_full_lines(paths, lines, use_color):
    124      for line_num, path in paths:
    126          for key, indent, i in path[:-1]:
    127:             line_colored = colored(lines[i], attrs=["dark"]) if use_color else lines[i]
    131:         line_colored = colored(lines[line_num], "red") if use_color else lines[line_num]
    162      use_color = (
    164:         (args.color == "auto" and sys.stdout.isatty() and colored)
    166:     if use_color and not colored:


"""  # noqa: E501

import argparse
import re
import sys

try:
    from termcolor import colored
except ImportError:
    colored = None


def get_paths(lines):
    """Generate indentation-based paths for given lines."""
    paths = []
    path_stack = []

    for i, line in enumerate(lines):
        stripped = line.lstrip()
        indent = len(line) - len(stripped)

        # Adjust the stack based on indentation
        while path_stack and path_stack[-1][1] >= indent:
            path_stack.pop()

        # Extract the "key" (first non-space word before :, {, etc.)
        if stripped:
            key = stripped.split()[0].rstrip(":{")
            if key:
                path_stack.append((key, indent, i))

        # Build the path
        paths.append((i, tuple(path_stack)))

    return paths


def print_inline(paths, lines, use_color):
    """Print paths and matched lines in inline format."""
    for line_num, path in paths:
        path_str = ".".join([p[0] for p in path[:-1]])
        line = lines[line_num].rstrip()
        if use_color:
            path_str = colored(path_str, attrs=["dark"])
            line = colored(line, "red")
        print(f"{line_num}: {path_str} {line}")


def print_full_lines(paths, lines, use_color):
    """Print paths and matched lines in full-lines format."""
    printed = set()
    for line_num, path in paths:
        # in simplest case -- print all lines of the path
        for key, indent, i in path[:-1]:
            line_colored = colored(lines[i], attrs=["dark"]) if use_color else lines[i]
            if i not in printed:
                print(f"{i}  {line_colored}")
                printed.add(i)
        line_colored = colored(lines[line_num], "red") if use_color else lines[line_num]
        print(f"{line_num}: {line_colored}")
        printed.add(line_num)


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "file",
        nargs="?",
        type=argparse.FileType("r"),
        default=sys.stdin,
        help="Input file to process (default: stdin)",
    )
    parser.add_argument(
        "-e", "--regex", type=str, help="Regular expression to match lines"
    )
    parser.add_argument(
        "-n",
        "--line-number",
        type=int,
        action="append",
        help="Specific line number(s) to print (can be used multiple times)",
    )
    parser.add_argument(
        "-f",
        "--format",
        choices=["inline", "full-lines"],
        default="inline",
        help="Output format: 'inline' (default) or 'full-lines'",
    )
    parser.add_argument(
        "--color",
        choices=["auto", "on", "off"],
        default="auto",
        help="Color output: 'auto' (default), 'on', or 'off'",
    )

    args = parser.parse_args()

    # Determine if color output should be used
    use_color = args.color == "on" or (
        args.color == "auto" and sys.stdout.isatty() and colored
    )
    if use_color and not colored:
        raise RuntimeError("Need 'termcolor' package to get colors")

    # Compile regex if provided
    regex = re.compile(args.regex) if args.regex else None

    # Read lines from the file
    lines = args.file.readlines()
    lines = [line.rstrip() for line in lines]

    # Get paths for all lines
    paths = get_paths(lines)

    # Filter by regex if provided
    if args.regex:
        regex = re.compile(args.regex)
        paths = [
            (line_num, path)
            for line_num, path in paths
            if regex.search(lines[line_num])
        ]

    # Filter by line numbers if provided
    if args.line_number:
        line_numbers = set(args.line_number)
        paths = [
            (line_num, path) for line_num, path in paths if line_num in line_numbers
        ]

    # Print based on the chosen format
    if args.format == "inline":
        print_inline(paths, lines, use_color)
    elif args.format == "full-lines":
        print_full_lines(paths, lines, use_color)
    else:
        raise ValueError(args.format)


if __name__ == "__main__":
    main()
